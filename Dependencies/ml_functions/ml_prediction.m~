function [out,scores] = ml_prediction(model, f_v, varargin)
    
    [pre, scores] = predict(model, f_v);
    
    out = str2double(cell2mat(pre));

    out = reshape(out, size(rgb2gray(subject)));
    
    % select morthological operation to filter output
    filter = 'areafilt'; % default value 
    for i = 1:length(varargin)
        if strcmp(varargin{i}, 'subject')
            subject = bsxfun(@times, varargin{i+1}, cast(hemi_mask, 'like', varargin{i+1}));
        end
        if strcmp(varargin{i}, 'zscore')
            zscore = bsxfun(@times, varargin{i+1}, cast(hemi_mask, 'like', varargin{i+1}));
        end
        if strcmp(varargin{i}, 'zscore_dif')
            zsc_dif = bsxfun(@times, varargin{i+1}, cast(hemi_mask, 'like', varargin{i+1}));
        end
        if strcmp(varargin{i}, 'color_features')
            color_f.red = bsxfun(@times, varargin{i+1}.red_ch_diff, cast(hemi_mask, 'like', varargin{i+1}.red_ch_diff));
            color_f.green = bsxfun(@times, varargin{i+1}.green_ch_diff, cast(hemi_mask, 'like', varargin{i+1}.green_ch_diff));
            color_f.blue = bsxfun(@times, varargin{i+1}.blue_ch_diff, cast(hemi_mask, 'like', varargin{i+1}.blue_ch_diff));
        end
        if strcmp(varargin{i}, 'ground_truth')
            labels = varargin{i+1};
        end
        if strcmp(varargin{i}, 'filtering')
            filtering = varargin{i+1};
        end
        if strcmp(varargin{i}, 'neighborhood')
            neigh = varargin{i+1};
        end
    end
    out = bwareafilt(imbinarize(out),4); 
end